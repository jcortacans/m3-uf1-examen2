int[] sort(int[] a){
int size = a.length;
if(size<2) return a;
int mid = size/2;
int[] left = new int[mid];
int[] right = new int[size - mid];
for(int i = 0; i < mid; i++) { left[i] = a[i]; }
for(int i = mid; i < size; i++) { right[i - mid] = a[i]; }
left = sort(left);
right = sort(right);
merge(left, right, a);
return a;
}
void merge(int[] left, int[] right, int[] a){
int n = a.length; int nL = left.length; int nR = right.length;
int i = 0; int j = 0; int k = 0;
while(i<nL && j<nR) {
if(left[i] >= right[j]) { a[k] = left[i]; i++;}
else { a[k] = right[j]; j++;}
k++;
}
while(i<nL) { a[k] = left[i]; i++; k++;}
while(j<nR) { a[k] = right[j]; j++; k++;}
}
sort(a);
int [] sortArrayEvenOdd(int[]a){
sort(a);
for(int i=0;i<a.length;i++){
if(a[i]%2 !=0){
int j=i;
while(a[j]%2 !=0 && j<a.length-1){
j++;
}
if(j>=a.length-1){
if(a[j]%2 !=0){
return a;
}
}
int temporal = a[i];
a[i]=a[j];
a[j]= temporal;
}
}
return a;
}
int[]a = {4,3,-1,6,7,14,-11,3,8};
sortArrayEvenOdd(a)